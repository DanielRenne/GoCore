package controllers

import (
	"github.com/DanielRenne/goCoreAppTemplate/constants"
	"github.com/DanielRenne/goCoreAppTemplate/models/v1/model"
	//"github.com/DanielRenne/goCoreAppTemplate/queries"
    "github.com/DanielRenne/GoCore/core/utils"
	"github.com/DanielRenne/goCoreAppTemplate/sessionFunctions"
	"github.com/DanielRenne/goCoreAppTemplate/viewModel"
    "time"
)

func (self *-CAPCAMEL-ListController) Root(context session_functions.RequestContext, uriParams map[string]string, respond session_functions.ServerResponse) {
	if session_functions.BlockByRoleAccess(context(), constants.FEATURE_-CAPITALIZED-_VIEW) {
		return
	}
	var vm viewModel.-CAPCAMEL-ListViewModel
	//vm.SettingsBar = SetupVisibleButtons(context,ButtonBarMetaData{IsAccountSettings: true, CurrentTab: viewModel.SETTINGS_CONST_-CAPITALIZED-} )
	vm.WidgetList = viewModel.InitWidgetList()
	if !self.SearchCommon(context, respond, &vm, uriParams) {
		return
	}

	respond(PARAM_REDIRECT_NONE, PARAM_SNACKBAR_MESSAGE_NONE, PARAM_SNACKBAR_TYPE_SUCCESS, nil, PARAM_TRANSACTION_ID_NONE, vm)

}

func (self *-CAPCAMEL-ListController) SearchCommon(context session_functions.RequestContext, respond session_functions.ServerResponse, vm *viewModel.-CAPCAMEL-ListViewModel, uriParams map[string]string) bool {
	vm.WidgetList.DataKey = "-CAPCAMELPLURAL-"
	// Add more search fields below later
	vm.WidgetList.SearchFields = utils.Array(model.FIELD_-CAPITALIZED-_ID)
	q := model.-CAPCAMELPLURAL-.Query().RenderViews(session_functions.GetDataFormat(context())).InitAndOr().AddAnd()
	viewModel.FilterWidgetList(vm.WidgetList, q)
	q = q.Join("LastUpdateUser")

	customCriteria, ok := uriParams["CustomCriteria"]
	if ok && len(customCriteria) > 0 && customCriteria != "last_hour" { // last_hour is busted everywhere for some reason.  Dont have time to fix mongo issues.
		if customCriteria == "last_hour" {
			vm.WidgetList.ListTitle = "ShowingModifiedLast15Minutes"
			vm.WidgetList.IsDefaultFilter = false
			q = q.AndRange(1, model.RangeQ("UpdateDate", time.Now().Add(-15 * time.Minute).UTC(), time.Now().UTC()))
		}
	} else {
		vm.WidgetList.ListTitle = "ShowingAll-CAPCAMELPLURAL-"
	}
	err := q.All(&vm.-CAPCAMELPLURAL-)

	if err != nil {
		respond(PARAM_REDIRECT_NONE, constants.ERRORS_GENERIC_DB, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
		return false
	}

	return true
}

func (self *-CAPCAMEL-ListController) Search(context session_functions.RequestContext, uriParams map[string]string, respond session_functions.ServerResponse) {
	if session_functions.BlockByRoleAccess(context(), constants.FEATURE_-CAPITALIZED-_VIEW) {
		return
	}

	var vm viewModel.-CAPCAMEL-ListViewModel
	vm.LoadDefaultState()
	//vm.SettingsBar = SetupVisibleButtons(context,ButtonBarMetaData{IsAccountSettings: true, CurrentTab: viewModel.SETTINGS_CONST_-CAPITALIZED-})
	vm.WidgetList = viewModel.InitWidgetListWithParams(uriParams)

	if !self.SearchCommon(context, respond, &vm, uriParams) {
		return
	}

	respond(PARAM_REDIRECT_NONE, PARAM_SNACKBAR_MESSAGE_NONE, PARAM_SNACKBAR_TYPE_SUCCESS, nil, PARAM_TRANSACTION_ID_NONE, vm)

}

func (self *-CAPCAMEL-AddController) Root(context session_functions.RequestContext, uriParams map[string]string, respond session_functions.ServerResponse) {
	if session_functions.BlockByRoleAccess(context(), constants.FEATURE_-CAPITALIZED-_ADD) {
		return
	}
	var vm viewModel.-CAPCAMEL-ModifyViewModel
	vm.LoadDefaultState()
	//vm.SettingsBar = SetupVisibleButtons(context,ButtonBarMetaData{IsAccountSettings: true, CurrentTab: viewModel.SETTINGS_CONST_-CAPITALIZED-_ADD})
	if !vm-CAPCAMEL-AddEditGetCommon(context, respond, &vm) {
		return
	}
	respond("", "", SNACKBAR_TYPE_SUCCESS, nil, "", vm)

}

func (self *-CAPCAMEL-ModifyController) Load(context session_functions.RequestContext, uriParams map[string]string, respond session_functions.ServerResponse) {

	if session_functions.BlockByRoleAccess(context(), constants.FEATURE_-CAPITALIZED-_MODIFY) {
		return
	}
	var vm viewModel.-CAPCAMEL-ModifyViewModel
	var err error
	vm.LoadDefaultState()
	//vm.SettingsBar = SetupVisibleButtons(context,ButtonBarMetaData{IsAccountSettings: true, CurrentTab: viewModel.SETTINGS_CONST_-CAPITALIZED-_MODIFY})
	id, ok := uriParams["Id"]

	if ok {
		err = model.-CAPCAMELPLURAL-.Query().ById(id, &vm.-CAPCAMEL-)
        if !vm-CAPCAMEL-AddEditGetCommon(context, respond, &vm) {
            return
        }
		if err != nil {
			respond(PARAM_REDIRECT_NONE, constants.ERRORS_ACCOUNT_NOT_FOUND, PARAM_SNACKBAR_TYPE_ERROR, nil, PARAM_TRANSACTION_ID_NONE, vm)
			return
		}
	} else {
		respond(PARAM_REDIRECT_NONE, constants.ERRORS_ACCOUNT_NO_ID, PARAM_SNACKBAR_TYPE_ERROR, nil, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}

	respond(PARAM_REDIRECT_NONE, PARAM_SNACKBAR_MESSAGE_NONE, PARAM_SNACKBAR_TYPE_SUCCESS, nil, PARAM_TRANSACTION_ID_NONE, vm)
}
