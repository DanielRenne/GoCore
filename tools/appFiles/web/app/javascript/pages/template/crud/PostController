package controllers

import (
	"github.com/DanielRenne/goCoreAppTemplate/br"
	"github.com/DanielRenne/goCoreAppTemplate/constants"
	"github.com/DanielRenne/goCoreAppTemplate/viewModel"
	"github.com/DanielRenne/goCoreAppTemplate/queries"
	"github.com/DanielRenne/goCoreAppTemplate/sessionFunctions"
	"bytes"
	"encoding/csv"
	"gopkg.in/mgo.v2/bson"
	"github.com/DanielRenne/GoCore/core/extensions"
)

func (self *-CAPCAMELPLURAL-Controller) Update-CAPCAMEL-Details(context session_functions.RequestContext, state string, respond session_functions.ServerResponse) {

	var vm viewModel.-CAPCAMEL-ModifyViewModel
	vm.Parse(state)
	if !session_functions.CheckRoleAccess(context(), constants.FEATURE_-CAPITALIZED-_MODIFY) {
		respond(PARAM_REDIRECT_NONE, "NoAccess", PARAM_SNACKBAR_TYPE_ERROR, nil, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}
	t, err := session_functions.StartTransaction(context())
	if err != nil {
		respond(PARAM_REDIRECT_NONE, constants.ERRORS_TRANSACTION_FAILED_TO_RETRIEVE, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}

	message, err := br.-CAPCAMELPLURAL-.Update(context, &vm, t)
	if err != nil {
		respond(PARAM_REDIRECT_NONE, message, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}

	err = t.Commit()

	if err != nil {
		respond(PARAM_REDIRECT_NONE, constants.ERRORS_TRANSACTION_FAILED_TO_COMMIT, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}

    hookSuccess := -CAPCAMEL-PostCommitHook("Update-CAPCAMEL-Details", context, vm.-CAPCAMEL-.Id.Hex())
	if !hookSuccess {
		err = queries.Transactions.Rollback(context, "-CAPCAMEL-PostCommitHook failed", t.Id.Hex())
		if err != nil {
			respond(PARAM_REDIRECT_NONE, constants.ERRORS_TRANSACTION_FAILED_POST_HOOK, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
			return
		}
		respond(PARAM_REDIRECT_NONE, constants.ERRORS_TRANSACTION_FAILED_TO_COMMIT, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}

	respond(PARAM_REDIRECT_BACK, constants.-CAPITALIZED-_SAVE_SUCCESS, PARAM_SNACKBAR_TYPE_SUCCESS, nil, t.Id.Hex(), vm)
}

func (self *-CAPCAMEL-ListController) ExportCSV(context session_functions.RequestContext, state string, respond session_functions.ServerResponse) {
	var vm viewModel.-CAPCAMEL-ListViewModel
	vm.Parse(state)
	if !session_functions.CheckRoleAccess(context(), constants.FEATURE_-CAPITALIZED-_EXPORT) {
		respond(PARAM_REDIRECT_NONE, "NoAccess", PARAM_SNACKBAR_TYPE_ERROR, nil, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}
	var i viewModel.-CAPCAMEL-Import
	schema := i.LoadSchema(context)
	b := &bytes.Buffer{}
	record := viewModel.GetCSVHeaderArray(context, schema)
	wr := csv.NewWriter(b)
	wr.Write(record)
	wr.Flush()

	for _, row := range vm.-CAPCAMELPLURAL- {
        -CSVFIELDSALL-
        wr := csv.NewWriter(b)
        wr.Write(record)
        wr.Flush()
	}
	respond(PARAM_REDIRECT_NONE, "export.csv", PARAM_SNACKBAR_TYPE_DOWNLOAD_CONTENT, nil, "", b.Bytes())
}

func (self *-CAPCAMEL-ListController) GetImportCSVTemplate(context session_functions.RequestContext, state string, respond session_functions.ServerResponse) {
	var i viewModel.-CAPCAMEL-Import
	schema := i.LoadSchema(context)
	output := viewModel.GetCSVTemplate(context, schema)
	respond(PARAM_REDIRECT_NONE, "import_-CAPCAMELPLURAL-.csv", PARAM_SNACKBAR_TYPE_DOWNLOAD_CONTENT, nil, "", []byte(output))
}

func (self *-CAPCAMEL-ListController) ImportCSV(context session_functions.RequestContext, state string, respond session_functions.ServerResponse) {
	var vm viewModel.-CAPCAMEL-ListViewModel
	vm.Parse(state)
	if !session_functions.CheckRoleAccess(context(), constants.FEATURE_-CAPITALIZED-_ADD) {
		respond(PARAM_REDIRECT_NONE, "NoAccess", PARAM_SNACKBAR_TYPE_ERROR, nil, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}

	var i viewModel.-CAPCAMEL-Import
	rows, err := i.LoadSchemaAndParseFile(context, vm.FileUpload.Content)
	if err != nil {
		vm.FileUpload.Meta.CompleteFailure = true
		respond(PARAM_REDIRECT_NONE, "CSVError", PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}
    actions := make(map[string]int, 0)
	errors, invalidRows, validRows := i.ValidateRows(context, rows)

	t, err := session_functions.StartTransaction(context())
	if err != nil {
		vm.FileUpload.Meta.CompleteFailure = true
		respond(PARAM_REDIRECT_NONE, constants.ERRORS_TRANSACTION_FAILED_TO_RETRIEVE, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, viewModel.EmptyViewModel{})
		return
	}

	var isUpdating bool
	for _, row := range validRows {
		var vm viewModel.-CAPCAMEL-ModifyViewModel
		if row[i.Id.Idx] != "" {
			isUpdating = true
			vm.-CAPCAMEL-.Id = bson.ObjectIdHex(row[i.Id.Idx])
		} else {
			isUpdating = false
		}
		//vm.-CAPCAMEL-.XXXXXXX = row[i.XXXXXXXXX.Idx]
        -CSVFIELDSGOLANGSETTERS-

        var message string
        var err error
		if isUpdating {
	        message, err = br.-CAPCAMELPLURAL-.Update(context, &vm, t)
		} else {
	        message, err = br.-CAPCAMELPLURAL-.Create(context, &vm, t)
		}

		if err != nil {
			errors = append(errors, message)
			invalidRows = append(invalidRows, row)
		}
		if isUpdating {
			actions[vm.-CAPCAMEL-.Id.Hex()] = 1
		} else {
			actions[vm.-CAPCAMEL-.Id.Hex()] = 2
		}
	}

	err = t.Commit()
	if err != nil {
		vm.FileUpload.Meta.CompleteFailure = true
		respond(PARAM_REDIRECT_NONE, constants.ERRORS_TRANSACTION_FAILED_TO_COMMIT, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}

	var updatedAffected int
	var createdAffected int
	for k, v := range actions {
		var hook string
		if v == 1 {
			updatedAffected += 1
			hook = "Update-CAPCAMEL-"
		} else {
			createdAffected += 1
			hook = "Create-CAPCAMEL-"
		}
		hookSuccess := -CAPCAMEL-PostCommitHook(hook, context, k)
		if !hookSuccess {
			err = queries.Transactions.Rollback(context, "-CAPCAMEL-PostCommitHook failed", t.Id.Hex())
			if err != nil {
				respond(PARAM_REDIRECT_NONE, constants.ERRORS_TRANSACTION_FAILED_POST_HOOK, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
				return
			}
			respond(PARAM_REDIRECT_NONE, constants.ERRORS_TRANSACTION_FAILED_TO_COMMIT, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
			return
		}
	}

	// Clear out file contents to limit large payload size
	snackbarSuccess := SNACKBAR_TYPE_SUCCESS
	skippedStr := ""
	if len(invalidRows) > 0 {
		snackbarSuccess = SNACKBAR_TYPE_WARNING
		replacements := queries.TagReplacements{
			Tag1: queries.Q("row_count", extensions.IntToString(len(invalidRows))),
		}
		skippedStr = " " + queries.AppContent.GetTranslationWithReplacements(context, "SkippedXCSVRows", &replacements)
	}
	createdStr := ""
	if len(validRows) > 0 {
		var key string
		if updatedAffected > 0 && createdAffected > 0 {
			key = "UpdatedXAndAddedXCSVRows"
		} else if updatedAffected > 0 && createdAffected == 0 {
			key = "UpdatedXCSVRows"
		} else {
			key = "CreatedXCSVRows"
		}
		if updatedAffected > 0 && createdAffected > 0 {
			replacements := queries.TagReplacements{
				Tag1: queries.Q("insert_count", extensions.IntToString(createdAffected)),
				Tag2: queries.Q("update_count", extensions.IntToString(updatedAffected)),
			}
			createdStr = queries.AppContent.GetTranslationWithReplacements(context, key, &replacements)
		} else {
			replacements := queries.TagReplacements{
				Tag1: queries.Q("row_count", extensions.IntToString(len(validRows))),
			}
			createdStr = queries.AppContent.GetTranslationWithReplacements(context, key, &replacements)
		}
	}

	vm.FileUpload.Meta.FileErrors = errors
	vm.FileUpload.Meta.RowsCommitted = len(validRows)
	vm.FileUpload.Meta.RowsCommittedInfo = createdStr
	vm.FileUpload.Meta.RowsSkipped = len(invalidRows)
	vm.FileUpload.Meta.RowsSkippedInfo = skippedStr

	respond(PARAM_REDIRECT_NONE, createdStr+skippedStr, snackbarSuccess, nil, PARAM_TRANSACTION_ID_NONE, vm)
}


func (self *-CAPCAMELPLURAL-Controller) Create-CAPCAMEL-(context session_functions.RequestContext, state string, respond session_functions.ServerResponse) {
	var vm viewModel.-CAPCAMEL-ModifyViewModel
    vm.Parse(state)
	if !session_functions.CheckRoleAccess(context(), constants.FEATURE_-CAPITALIZED-_ADD) {
		respond(PARAM_REDIRECT_NONE, "NoAccess", PARAM_SNACKBAR_TYPE_ERROR, nil, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}
	t, err := session_functions.StartTransaction(context())

	if err != nil {
		respond(PARAM_REDIRECT_NONE, constants.ERRORS_TRANSACTION_FAILED_TO_RETRIEVE, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}

	message, err := br.-CAPCAMELPLURAL-.Create(context, &vm, t)
	if err != nil {
		respond(PARAM_REDIRECT_NONE, message, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}

	err = t.Commit()

	if err != nil {
		respond(PARAM_REDIRECT_NONE, constants.ERRORS_TRANSACTION_FAILED_TO_COMMIT, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}

    hookSuccess := -CAPCAMEL-PostCommitHook("Create-CAPCAMEL-", context, vm.-CAPCAMEL-.Id.Hex())
	if !hookSuccess {
		err = queries.Transactions.Rollback(context, "-CAPCAMEL-PostCommitHook failed", t.Id.Hex())
		if err != nil {
			respond(PARAM_REDIRECT_NONE, constants.ERRORS_TRANSACTION_FAILED_POST_HOOK, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
			return
		}
		respond(PARAM_REDIRECT_NONE, constants.ERRORS_TRANSACTION_FAILED_TO_COMMIT, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}
    respond(PARAM_REDIRECT_BACK, message, PARAM_SNACKBAR_TYPE_SUCCESS, nil, t.Id.Hex(), vm)
}

func (self *-CAPCAMELPLURAL-Controller) DeleteMany-CAPCAMELPLURAL-(context session_functions.RequestContext, state string, respond session_functions.ServerResponse) {
	var vm viewModel.-CAPCAMEL-ListViewModel
	vm.Parse(state)
	if !session_functions.CheckRoleAccess(context(), constants.FEATURE_-CAPITALIZED-_DELETE) {
		respond(PARAM_REDIRECT_NONE, "NoAccess", PARAM_SNACKBAR_TYPE_ERROR, nil, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}
	t, err := session_functions.StartTransaction(context())

	if err != nil {
		respond(PARAM_REDIRECT_NONE, constants.ERRORS_TRANSACTION_FAILED_TO_RETRIEVE, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}
	var -CAPCAMEL-Id string
	for i := 0; i < len(vm.Deleted-CAPCAMELPLURAL-); i++ {
		var vmModify viewModel.-CAPCAMEL-ModifyViewModel
		vmModify.-CAPCAMEL- = vm.Deleted-CAPCAMELPLURAL-[i]
		-CAPCAMEL-Id = vmModify.-CAPCAMEL-.Id.Hex()

		message, err := br.-CAPCAMELPLURAL-.Delete(context, &vmModify, t)
		if err != nil {
			respond(PARAM_REDIRECT_NONE, message, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
			return
		}
	}
	err = t.Commit()

	if err != nil {
		respond(PARAM_REDIRECT_NONE, constants.ERRORS_TRANSACTION_FAILED_TO_COMMIT, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}

    hookSuccess := -CAPCAMEL-PostCommitHook("DeleteMany-CAPCAMELPLURAL-", context, -CAPCAMEL-Id)
	if !hookSuccess {
		err = queries.Transactions.Rollback(context, "-CAPCAMEL-PostCommitHook failed", t.Id.Hex())
		if err != nil {
			respond(PARAM_REDIRECT_NONE, constants.ERRORS_TRANSACTION_FAILED_POST_HOOK, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
			return
		}
		respond(PARAM_REDIRECT_NONE, constants.ERRORS_TRANSACTION_FAILED_TO_COMMIT, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}
	respond(PARAM_REDIRECT_RERENDER, constants.-CAPITALIZED-_DELETE_SUCCESSFUL, PARAM_SNACKBAR_TYPE_SUCCESS, nil, t.Id.Hex(), vm)
}

func (self *-CAPCAMELPLURAL-Controller) Delete-CAPCAMEL-(context session_functions.RequestContext, state string, respond session_functions.ServerResponse) {
	var vm viewModel.-CAPCAMEL-ModifyViewModel
	vm.Parse(state)
	if !session_functions.CheckRoleAccess(context(), constants.FEATURE_-CAPITALIZED-_DELETE) {
		respond(PARAM_REDIRECT_NONE, "NoAccess", PARAM_SNACKBAR_TYPE_ERROR, nil, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}

	t, err := session_functions.StartTransaction(context())

	if err != nil {
		respond(PARAM_REDIRECT_NONE, constants.ERRORS_TRANSACTION_FAILED_TO_RETRIEVE, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}


    message, err := br.-CAPCAMELPLURAL-.Delete(context, &vm, t)
    if err != nil {
        respond(PARAM_REDIRECT_NONE, message, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
        return
    }

	err = t.Commit()

	if err != nil {
		respond(PARAM_REDIRECT_NONE, constants.ERRORS_TRANSACTION_FAILED_TO_COMMIT, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}

    hookSuccess := -CAPCAMEL-PostCommitHook("Delete-CAPCAMEL-", context, vm.-CAPCAMEL-.Id.Hex())
	if !hookSuccess {
		err = queries.Transactions.Rollback(context, "-CAPCAMEL-PostCommitHook failed", t.Id.Hex())
		if err != nil {
			respond(PARAM_REDIRECT_NONE, constants.ERRORS_TRANSACTION_FAILED_POST_HOOK, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
			return
		}
		respond(PARAM_REDIRECT_NONE, constants.ERRORS_TRANSACTION_FAILED_TO_COMMIT, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}
	respond(PARAM_REDIRECT_RERENDER, constants.-CAPITALIZED-_DELETE_SUCCESSFUL, PARAM_SNACKBAR_TYPE_SUCCESS, nil, t.Id.Hex(), vm)
}

func (self *-CAPCAMELPLURAL-Controller) Copy-CAPCAMEL-(context session_functions.RequestContext, state string, respond session_functions.ServerResponse) {
	var vm viewModel.-CAPCAMEL-ModifyViewModel
	vm.Parse(state)
	if !session_functions.CheckRoleAccess(context(), constants.FEATURE_-CAPITALIZED-_COPY) {
		respond(PARAM_REDIRECT_NONE, "NoAccess", PARAM_SNACKBAR_TYPE_ERROR, nil, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}
	t, err := session_functions.StartTransaction(context())

	if err != nil {
		respond(PARAM_REDIRECT_NONE, constants.ERRORS_TRANSACTION_FAILED_TO_RETRIEVE, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}

    copyVm, message, err := br.-CAPCAMELPLURAL-.Copy(context, vm, t)
	if err != nil {
		respond(PARAM_REDIRECT_NONE, message, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}


	err = t.Commit()

	if err != nil {
		respond(PARAM_REDIRECT_NONE, constants.ERRORS_TRANSACTION_FAILED_TO_COMMIT, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}

    hookSuccess := -CAPCAMEL-PostCommitHook("Copy-CAPCAMEL-", context, vm.-CAPCAMEL-.Id.Hex())
	if !hookSuccess {
		err = queries.Transactions.Rollback(context, "-CAPCAMEL-PostCommitHook failed", t.Id.Hex())
		if err != nil {
			respond(PARAM_REDIRECT_NONE, constants.ERRORS_TRANSACTION_FAILED_POST_HOOK, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
			return
		}
		respond(PARAM_REDIRECT_NONE, constants.ERRORS_TRANSACTION_FAILED_TO_COMMIT, PARAM_SNACKBAR_TYPE_ERROR, err, PARAM_TRANSACTION_ID_NONE, vm)
		return
	}
	respond(PARAM_REDIRECT_RERENDER, message, PARAM_SNACKBAR_TYPE_SUCCESS, nil, t.Id.Hex(), copyVm)
}


